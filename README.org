Implementation of Abstracting Abstract Control (http://arxiv.org/pdf/1305.3163v8.pdf)

  - aac.ml: implementation of the CESK*Ξ machine (Figure 3). This is a CESK
    machine with a continuation store separate from the value store.
  - aac_optimized.ml: implementation of the CESIK*Ξ machine (Figure 6). This
    adds local continuations to the previous machine.
  - aac_global.ml: implementation of the CESIK*Ξ machine with a globalized
    continuation store (Shiver's timestamp technique)
  - aac_global_store.ml: implementation of the CESIK*Ξ machine with globalized
    stores (continuation and values).
  - aac_memo.ml: implementation of the CESK*Ξ machine with memoization
    (Figure 12).

Coming up:
  - aac_optimized_memo.ml: adaptation of memoization to the CESIK*Ξ
    machine. This causes some problems, as the memoization needs to access
    contexts when evaluating an application (`(e0 e1)` case), but in the CESIK*Ξ
    contexts are only created when stepping into the body of a function. There
    is therefore no way to access the corresponding context when evaluating an
    application, since the operand and operators where not yet evaluated. It
    would be feasible to have two kinds of contexts (one created at function
    application, one created when stepping into a function's body), but we would
    lose the advantage of having local continuations (as continuations would be
    stored before every function application).
  - Adaptation of self-adjusting memoization to the CESIK*Ξ machine

To run:
#+BEGIN_SRC
$ make
$ ./aac.byte # or any other .byte
#+END_SRC

This generates a graph for each example program. Those graphs can be viewed with
/dot/.
